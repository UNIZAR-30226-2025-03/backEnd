// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model Usuario {
  Email                   String @id
  NombreCompleto          String 
  Password                String
  FechaNacimiento         DateTime 
  Nick                    String @unique  
  LinkFoto                String?
  Privacidad              String @default("privado")
  ColaReproduccion        Json?
  PosicionCola            Int?
  UltimaListaEscuchada    Int?
  listas                  ListaReproduccion[]
  cancionesGuardadas      CancionGuardada[]
  cancionesEscuchadas     CancionEscuchada[]
  cancionesEscuchando     CancionEscuchando[]
  mensajesEnviados        Mensaje[] @relation("MensajesEnviados")
  mensajesRecibidos       Mensaje[] @relation("MensajesRecibidos")
  preferencias            Preferencia[]
  amistadesEnviadas       Amistad[] @relation("AmistadesEnviadas")
  amistadesRecibidas      Amistad[] @relation("AmistadesRecibidas")
  likes                   Like[]
}

model Like {
  EmailUsuario           String
  IdLista                Int
  tieneLike              Boolean @default(false)

  usuario                Usuario  @relation(fields: [EmailUsuario], references: [Email])
  lista                  Lista    @relation(fields: [IdLista], references: [Id])
  @@id([EmailUsuario, IdLista]) // Relaci√≥n N a N entre Usuario y Lista
}

model Artista {
  Nombre                 String  @id
  Biografia              String
  NumOyentesTotales      Int    @default(0)
  FotoPerfil             String
  albums                 AutorAlbum[]
  canciones              AutorCancion[]
}

model Cancion {
  Id                     Int     @id @default(autoincrement())
  Nombre                 String
  Duracion               Int 
  Genero                 String?
  NumReproducciones      Int     @default(0)
  NumFavoritos           Int     @default(0)
  Portada                String
  autores                AutorCancion[]
  listas                 PosicionCancion[]
  cancionesGuardadas     CancionGuardada[]
  cancionesEscuchadas    CancionEscuchada[]
  cancionEscuchando      CancionEscuchando[]
}

model Genero {
  NombreGenero           String  @id
  FotoGenero             String  @default("Sin foto")
  
  preferencias           Preferencia[]
}

model Lista {
  Id                     Int      @id @default(autoincrement())
  Nombre                 String
  NumCanciones           Int      @default(0)
  Duracion               Int      @default(0)
  NumLikes               Int      @default(0)
  Descripcion            String
  Portada                String
  TipoLista              String   

  posiciones             PosicionCancion[]
  likes                  Like[]
  //Relaccion 1 a 1 con Album y ListaReproduccion
  album             Album?
  listaReproduccion ListaReproduccion?
}

model Album { 
  Id                     Int      @id @unique
  NumReproducciones      Int      @default(0)
  FechaLanzamiento       DateTime @default(now())

  lista                  Lista   @relation(fields: [Id], references: [Id], onDelete: Cascade)
  autores                AutorAlbum[]
}

model ListaReproduccion {
  Id                     Int      @id @unique
  Nombre                 String
  TipoPrivacidad         String  @default("privado")
  EmailAutor             String
  Genero                 String  @default("Sin genero")

  autor                  Usuario @relation(fields: [EmailAutor], references: [Email])
  lista                  Lista   @relation(fields: [Id], references: [Id], onDelete: Cascade)
}

model CancionGuardada {
  EmailUsuario           String
  IdCancion              Int
  FechaGuardado          DateTime @default(now())

  usuario                Usuario  @relation(fields: [EmailUsuario], references: [Email])
  cancion                Cancion  @relation(fields: [IdCancion], references: [Id])
  @@id([EmailUsuario, IdCancion])
}

model CancionEscuchada {
  EmailUsuario           String
  IdCancion              Int
  NumReproducciones      Int @default(0)

  usuario                Usuario  @relation(fields: [EmailUsuario], references: [Email])
  cancion                Cancion  @relation(fields: [IdCancion], references: [Id])
  @@id([EmailUsuario, IdCancion])
}

model CancionEscuchando {
  EmailUsuario           String
  IdCancion              Int
  MinutoEscucha          Int

  usuario                Usuario  @relation(fields: [EmailUsuario], references: [Email])
  cancion                Cancion  @relation(fields: [IdCancion], references: [Id])
  @@id([EmailUsuario])
}

model AutorAlbum {
  IdAlbum               Int
  NombreArtista         String

  album                 Album   @relation(fields: [IdAlbum], references: [Id])
  artista               Artista @relation(fields: [NombreArtista], references: [Nombre])
  @@id([IdAlbum, NombreArtista])
}

model AutorCancion {
  IdCancion             Int
  NombreArtista         String

  cancion               Cancion @relation(fields: [IdCancion], references: [Id])
  artista               Artista @relation(fields: [NombreArtista], references: [Nombre])
  @@id([IdCancion, NombreArtista])
}

model Mensaje {
  Id                    Int      @id @default(autoincrement())
  EmailSender           String
  EmailReceiver         String
  Mensaje               String
  Fecha                 DateTime @default(now())
  Leido                 Boolean  @default(false)

  sender                Usuario  @relation("MensajesEnviados", fields: [EmailSender], references: [Email])
  receiver              Usuario  @relation("MensajesRecibidos", fields: [EmailReceiver], references: [Email])
}

model Amistad {
  NickFriendSender      String
  NickFriendReceiver    String
  EstadoSolicitud       String @default("pendiente")
  FechaComienzoAmistad  DateTime?

  sender                Usuario  @relation("AmistadesEnviadas", fields: [NickFriendSender], references: [Nick])
  receiver              Usuario  @relation("AmistadesRecibidas", fields: [NickFriendReceiver], references: [Nick])
  @@id([NickFriendSender, NickFriendReceiver])
}

model Preferencia {
  NombreGenero          String
  Email                 String

  genero               Genero   @relation(fields: [NombreGenero], references: [NombreGenero])
  usuario              Usuario  @relation(fields: [Email], references: [Email])
  @@id([NombreGenero, Email])
}

model PosicionCancion {
  IdLista              Int
  IdCancion            Int
  Posicion             Int

  lista               Lista   @relation(fields: [IdLista], references: [Id])
  cancion             Cancion @relation(fields: [IdCancion], references: [Id])
  @@id([IdLista, IdCancion])
}



