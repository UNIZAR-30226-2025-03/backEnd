<!DOCTYPE html>
<html>
<head>
  <title>Test de Streaming de Audio - Canción Específica</title>
  <script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
  <style>
    #log {
      height: 300px;
      width: 100%;
      border: 1px solid #ccc;
      overflow-y: scroll;
      padding: 10px;
      font-family: monospace;
      margin-top: 10px;
    }
    .error { color: red; }
    .success { color: green; }
    .info { color: blue; }
  </style>
</head>
<body>
  <h1>Test de Streaming de Audio - Canción Específica</h1>
  <div>
    <button onclick="startStreamSong()">Iniciar Streaming de 'New_Bitch'</button>
    <button onclick="listBlobs()">Listar Archivos</button>
  </div>
  <div id="status">Estado: Desconectado</div>
  <audio id="player" controls></audio>
  <div id="log"></div>

  <script>
    // Variables para almacenar los chunks y la canción actual
    let audioChunks = [];
    let currentSong = "";
    const logElement = document.getElementById('log');

    // Variable para guardar el intervalo que envía el progreso cada 2s
    let progressInterval = null;

    function log(message, type = 'normal') {
      const entry = document.createElement('div');
      entry.textContent = `[${new Date().toISOString().slice(11, 19)}] ${message}`;
      entry.className = type;
      logElement.appendChild(entry);
      logElement.scrollTop = logElement.scrollHeight;
    }

    const socket = io('http://localhost:3000', {
      transports: ['websocket']
    });
    
    socket.on('connect', () => {
      document.getElementById('status').textContent = 'Estado: Conectado';
      log('Conectado al servidor: ' + socket.id, 'success');
    });
    
    socket.on('disconnect', () => {
      document.getElementById('status').textContent = 'Estado: Desconectado';
      log('Desconectado del servidor', 'error');
      // Detenemos el intervalo si había uno en marcha
      if (progressInterval) {
        clearInterval(progressInterval);
        progressInterval = null;
      }
    });
    
    socket.on('error', (error) => {
      log('Error: ' + error, 'error');
    });
    
    socket.on('audioChunk', (data) => {
      if (currentSong !== data.filename) {
        log('Nueva canción: ' + data.filename, 'info');
        currentSong = data.filename;
        audioChunks = [];
      }
      
      // Convertir de base64 a ArrayBuffer
      const binary = atob(data.data);
      const bytes = new Uint8Array(binary.length);
      for (let i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
      }
      
      audioChunks.push(bytes.buffer);
      
      if (audioChunks.length % 10 === 0) {
        log(`Recibidos ${audioChunks.length} chunks de audio`);
      }
    });
    
    socket.on('streamComplete', () => {
      log('Stream completo, reproduciendo audio...', 'success');
      playAudio();
    });

    // Evento para recibir la lista de blobs si la pides
    socket.on('blobList', (blobs) => {
      log('Blobs disponibles:', 'info');
      blobs.forEach(blob => {
        log(`- ${blob}`, 'info');
      });
    });
    
    function startStreamSong() {
      log("Solicitando inicio de streaming para la canción 'New_Bitch'...");
      socket.emit('startStream', { songId: 50, userId: "839316@unizar.es" });
      audioChunks = [];

      // Si ya existía un intervalo, lo limpiamos para no duplicarlo
      if (progressInterval) {
        clearInterval(progressInterval);
      }

      // Configuramos un intervalo que, cada 2s, envíe el tiempo actual
      const player = document.getElementById('player');
      progressInterval = setInterval(() => {
        // Enviamos solo si el audio se está reproduciendo
        if (!player.paused) {
          const currentTime = Math.floor(player.currentTime);
          socket.emit('progressUpdate', {
            userId: "839316@unizar.es",
            songId: 50,
            currentTime,
          });
          log(`Progreso enviado: ${currentTime} segundos`, 'info');
        }
      }, 2000);
    }
    
    function listBlobs() {
      log('Solicitando lista de blobs...');
      socket.emit('listBlobs');
    }
    
    function playAudio() {
      if (audioChunks.length === 0) {
        log('No hay datos de audio para reproducir', 'error');
        return;
      }
      
      // Combinar todos los chunks en un solo ArrayBuffer
      const totalLength = audioChunks.reduce((acc, val) => acc + val.byteLength, 0);
      const audioData = new Uint8Array(totalLength);
      let offset = 0;
      
      for (const chunk of audioChunks) {
        audioData.set(new Uint8Array(chunk), offset);
        offset += chunk.byteLength;
      }
      
      // Crear un Blob y reproducir
      const blob = new Blob([audioData], { type: 'audio/mpeg' });
      const url = URL.createObjectURL(blob);
      
      const player = document.getElementById('player');
      player.src = url;
      player.play();
      
      log('Audio preparado para reproducción', 'success');
    }
  </script>
</body>
</html>
