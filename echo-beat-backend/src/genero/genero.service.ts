import { Injectable, BadRequestException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service'; // Aseg√∫rate de tener PrismaService

@Injectable()
export class GeneroService {
  constructor(private readonly prisma: PrismaService) {}

  /**
   * Obtiene todos los g√©neros asociados a un usuario y sus respectivas fotos.
   *
   * A partir del correo electr√≥nico del usuario, consulta la tabla `preferencia` para obtener los nombres de los g√©neros
   * y luego consulta la tabla `genero` para obtener la foto correspondiente a cada g√©nero.
   *
   * @param userEmail - Correo electr√≥nico del usuario.
   * @returns Una promesa que resuelve un arreglo de objetos con `NombreGenero` y `FotoGenero`.
   */
  async getGenerosConFotosByEmail(userEmail: string): Promise<{ NombreGenero: string; FotoGenero: string }[]> {
    // Obtener los g√©neros asociados al usuario
    const preferencias = await this.prisma.preferencia.findMany({
      where: { Email: userEmail },
      select: { NombreGenero: true },
    });

    // Si el usuario no tiene g√©neros asociados, devolver un array vac√≠o
    if (!preferencias.length) {
      throw new Error(`No se encontraron g√©neros asociados al usuario con email ${userEmail}`);
    }

    // Obtener las fotos de los g√©neros consultando la tabla `genero`
    const nombresGeneros = preferencias.map(p => p.NombreGenero);
    const generosConFotos = await this.prisma.genero.findMany({
      where: { NombreGenero: { in: nombresGeneros } },
      select: { NombreGenero: true, FotoGenero: true },
    });

    return generosConFotos; // Devuelve un array de objetos { NombreGenero, FotoGenero }
  }

  async getAllGenerosWithUserSelection(userEmail: string) {
    // üîπ Obtener todos los g√©neros de la aplicaci√≥n
    const generos = await this.prisma.genero.findMany({
      select: { NombreGenero: true },
    });

    // üîπ Obtener los g√©neros seleccionados por el usuario en la tabla Preferencia
    const preferenciasUsuario = await this.prisma.preferencia.findMany({
      where: { Email: userEmail },
      select: { NombreGenero: true },
    });

    // üîπ Convertir las preferencias del usuario en un Set para f√°cil acceso
    const preferenciasSet = new Set(preferenciasUsuario.map(p => p.NombreGenero));

    // üîπ Mapear los g√©neros con el booleano `seleccionado`
    return generos.map(genero => ({
      NombreGenero: genero.NombreGenero,
      seleccionado: preferenciasSet.has(genero.NombreGenero), // ‚úÖ true si est√° en Preferencia, false si no
    }));
  }
  
  async updateUserPreferences(userEmail: string, generos: string[]) {
    if (!userEmail || !Array.isArray(generos) || generos.length === 0) {
      throw new BadRequestException('Email y lista de g√©neros son requeridos.');
    }

    // üîπ Obtener los g√©neros actuales en la base de datos para ese usuario
    const generosActuales = await this.prisma.preferencia.findMany({
      where: { Email: userEmail },
      select: { NombreGenero: true },
    });

    const generosActualesSet = new Set(generosActuales.map(g => g.NombreGenero));
    const generosEntradaSet = new Set(generos);

    // üî• 1Ô∏è‚É£ Eliminar g√©neros que est√°n en la BD pero no en la entrada
    const generosAEliminar = [...generosActualesSet].filter(g => !generosEntradaSet.has(g));

    if (generosAEliminar.length > 0) {
      await this.prisma.preferencia.deleteMany({
        where: {
          Email: userEmail,
          NombreGenero: { in: generosAEliminar },
        },
      });
    }

    // üî• 2Ô∏è‚É£ Agregar los nuevos g√©neros (evitando duplicados)
    const nuevosGeneros = generos.filter(g => !generosActualesSet.has(g)).map(genero => ({
      Email: userEmail,
      NombreGenero: genero,
    }));

    if (nuevosGeneros.length > 0) {
      await this.prisma.preferencia.createMany({
        data: nuevosGeneros,
        skipDuplicates: true, // üîπ Evita insertar si ya existe
      });
    }

    return { message: 'Preferencias actualizadas correctamente.' };
  }
}


